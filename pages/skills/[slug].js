import Head from 'next/head'
import * as React from 'react';
import Typography from '@mui/material/Typography';
import Link from '@mui/material/Link';

export default function Skill({results, params}) {
  const skill = results.data.skillsCollection.items.find(
    item => item.slug === params.slug
  );
  return (
           <>
              <Head>
                <title>{skill.name}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
              </Head>
  
              <div>TEST {skill.name} </div> 
              </>
  ) 
}

const query = `
query($slug: String!) {
  skillsCollection(where: { slug: $slug }) {
    items {
      slug
      name
      usage
      image {
        url
      }
    }
  }
}
`

/// Get URL Path
export async function getStaticPaths() { 
  const results = await fetch(`https://graphql.contentful.com/content/v1/spaces/${process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID}`, {
    method: "POST",
    headers: {
    "Content-Type": "application/json",
    // Authenticate the request
    Authorization: `Bearer ${process.env.NEXT_PUBLIC_CDA_TOKEN}`,
    },
    // send the GraphQL query
    body: JSON.stringify({
      query: `
        {
          skillsCollection {
            items {
              slug
            }
          }
        }
      `,
    }),
  })
  .then((response) => response.json()); 

  const slugs = results.data.skillsCollection.items.map(skill => skill.slug);

  return {
    paths: slugs.map(slug => ({ params: { slug } })),
    fallback: false,
  }
}

/// GET INFO FROM CONTENTFUL
export async function getStaticProps({ params }) {
    const data = await fetch(`https://graphql.contentful.com/content/v1/spaces/${process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID}`, {
        method: "POST",
        headers: {
        "Content-Type": "application/json",
        // Authenticate the request
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_CDA_TOKEN}`,
        },
        // send the GraphQL query
        body: JSON.stringify({ 
          query,
          variables: {
            slug: params.slug,
          },
      }),
    })
    .then((response) => response.json()); 
    return {
        props: {
          results: data,
          params,
        }
    }
}


